version: "3"

services:

  front-api:
    image: rhannachi1991/voting-app_front-api:latest
    ports:
      - "3004:80"
    networks:
      - net-front


  front-socket:
    image: rhannachi1991/voting-app_front-socket:latest
    ports:
      - "3003:80"
    networks:
      - net-front


  socket:
    image: rhannachi1991/voting-app_socket:latest
    ports:
      - "3002:3000"
    environment:
      PORT: 3000
      FRONT_SOCKET_URL: "http://localhost:3003"
      RABBITMQ_URI: "amqp://guest:guest@rabbitmq"
      RABBITMQ_QUEUE_NAME: "queue-api-socket"
    networks:
      - net-front
      - net-back


  api:
    image: rhannachi1991/voting-app_api:latest
    ports:
      - "3001:3000"
    environment:
      PORT: 3000
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DATABASE: "postgres"
      POSTGRES_HOST: "db"
      RABBITMQ_URI: "amqp://guest:guest@rabbitmq"
      RABBITMQ_QUEUE_NAME: "queue-api-socket"
      FRONT_ORIGIN: "http://localhost:3004"
    networks:
      - net-front
      - net-back


  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - /var/voting-app/rabbitmq/data:/var/lib/rabbitmq/
      - /var/voting-app/rabbitmq/log:/var/log/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - net-back


  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - /var/voting-app/postgresql/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: "5s"
    ports:
      - "5432:5432"
    networks:
      - net-back


  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - 8080:8080
    stop_grace_period: 1m30s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [ node.role == manager ]

# TODO worker

networks:
  net-front:
  net-back:
